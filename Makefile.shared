# Shared make information between Build engine and games

ENGINELIB=src/libengine.a
EDITORLIB=src/libbuild.a

SDL2CONFIG?=$(shell which sdl2-config || which false)
PKGCONFIG?=$(shell which pkg-config || which false)
export SDL2CONFIG PKGCONFIG

# Path to the included libsquish
LIBSQUISH=libsquish

# overridden for OSes that don't have the cutdown stdc++ that is supc++
STDCPPLIB=-lsupc++

BUILDCFLAGS=-I$(LIBSQUISH)
BUILDLIBS=

# Detect the platform by interrogating the C compiler. This allows
# cross-compilation by overriding CC etc.
# For reference:
#  Archlinux: x86_64-pc-linux-gnu
#  Debian: x86_64-linux-gnu i386-linux-gnu aarch64-linux-gnu arm-linux-gnueabihf
#  macOS: x86_64-apple-darwin18.2.0
#  mingw32: x86_64-w64-mingw32 i686-w64-mingw32
#  FreeBSD: x86_64-unknown-freebsd10.4
machine=$(strip $(shell $(CC) -dumpmachine))
ifndef PLATFORM
	PLATFORM=UNKNOWN
	ifneq (,$(findstring wasm,$(machine)))
		PLATFORM=WASM
	endif
	ifneq (,$(findstring -linux,$(machine)))
		PLATFORM=LINUX
	endif
	ifneq (,$(findstring -freebsd,$(machine)))
		PLATFORM=BSD
	endif
	ifneq (,$(findstring -mingw32,$(machine)))
		PLATFORM=WINDOWS
	endif
	ifneq (,$(findstring -darwin,$(machine)))
		PLATFORM=DARWIN
	endif
endif
ifndef ARCHITECTURE
	ARCHITECTURE=UNKNOWN
	ifneq (,$(findstring wasm,$(machine)))
		ARCHITECTURE=X86
	endif
	ifneq (,$(findstring aarch64-,$(machine)))
		ARCHITECTURE=ARM_64
	endif
	ifneq (,$(findstring arm-,$(machine)))
		ARCHITECTURE=ARM
	endif
	ifneq (,$(findstring x86_64-,$(machine)))
		ARCHITECTURE=X86_64
	endif
	ifneq (,$(findstring i386-,$(machine)))
		ARCHITECTURE=X86
	endif
	ifneq (,$(findstring i486-,$(machine)))
		ARCHITECTURE=X86
	endif
	ifneq (,$(findstring i586-,$(machine)))
		ARCHITECTURE=X86
	endif
	ifneq (,$(findstring i686-,$(machine)))
		ARCHITECTURE=X86
	endif
endif

ifeq ($(PLATFORM),WINDOWS)
	RENDERTYPE ?= WIN
	EXESUFFIX=.exe
	BUILDLIBS+= -lmingwex -lwinmm -lws2_32 -lcomctl32 -lcomdlg32 -luxtheme -lxinput9_1_0
else
	RENDERTYPE=SDL
	EXESUFFIX=
endif

ifeq ($(PLATFORM),WASM)
	RENDERTYPE=SDL
	EXESUFFIX=.html
endif

ifeq ($(RENDERTYPE),SDL)
	ifneq ($(SDL2CONFIG),)
		SDLCONFIG_CFLAGS=$(shell $(SDL2CONFIG) --cflags)
		SDLCONFIG_LIBS=$(shell $(SDL2CONFIG) --libs)
	else
		$(error No $(SDL2CONFIG) could be found)
	endif

	ifeq ($(PLATFORM),WASM)
#	If you're feeling lazy:
#	-s ALLOW_MEMORY_GROWTH
#	-s MAXIMUM_MEMORY=4GB
		SDLCONFIG_CFLAGS= -Os \
											-s WASM=1 \
											-s TOTAL_MEMORY=20MB \
											-s ASSERTIONS=1 \
											-s USE_SDL=2 \
											-s USE_SDL_IMAGE=2 \
											-s MAX_WEBGL_VERSION=2 \
											-s SDL2_IMAGE_FORMATS='["png"]' \
											--shell-file ./assets/shell.html \
											--preload-file "./assets@/home/web_user/.kenbuild/"
		SDLCONFIG_LIBS= -lSDL2 -lGLESv2 
	endif

	ifeq (1,$(WITHOUT_GTK))
		HAVE_GTK=0
	else
		ifneq (No,$(shell $(PKGCONFIG) --atleast-version=3.4 gtk+-3.0 || echo -n No))
			HAVE_GTK=1
			GTKCONFIG_CFLAGS=-DHAVE_GTK $(shell $(PKGCONFIG) --cflags gtk+-3.0)
			GTKCONFIG_LIBS=$(shell $(PKGCONFIG) --libs gtk+-3.0) -ldl
		else
			HAVE_GTK=0
		endif
	endif
endif
ifeq ($(RENDERTYPE),WIN)
	BUILDLIBS+= -mwindows -ldxguid
	#BUILDLIBS+= -static
	#BUILDLIBS+= -static-libgcc -static-libstdc++
endif

# Until I work out how to deal with PIE and PIC, the x86 inline
# assembly is hopelessly broken, so it's forced off for all.
#ifneq ($(ARCHITECTURE),X86)
	USE_ASM=0
#endif

BUILDCFLAGS+= -DRENDERTYPE$(RENDERTYPE)=1

ifneq (0,$(USE_POLYMOST))
  BUILDCFLAGS+= -DUSE_POLYMOST=$(USE_POLYMOST)
endif
ifneq (0,$(USE_OPENGL))
  BUILDCFLAGS+= -DUSE_OPENGL=$(USE_OPENGL)
endif
ifneq (0,$(USE_ASM))
  BUILDCFLAGS+= -DUSE_ASM=$(USE_ASM)
endif

