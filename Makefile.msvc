# Build Makefile for Microsoft NMake

# Engine options - these may be overridden by game makefiles
#  USE_POLYMOST   - enables Polymost renderer
#  USE_OPENGL     - enables OpenGL support in Polymost
#     Define as 0 to disable OpenGL
#     Define as 1 (or 2) for GL 2.0/2.1 profile
#     Define as 3 for GL 3.2 Core profile
#  USE_ASM        - enables the use of assembly code
USE_POLYMOST=1
USE_OPENGL=1
USE_ASM=1

RELEASE=1

# Create Makefile.msvcuser yourself to provide your own overrides
# for configurable values
!if EXIST(Makefile.msvcuser)
!include Makefile.msvcuser
!endif

SRC=src
GAME=kenbuild
GAMEDATA=kenbuild-data
TOOLS=tools
INC=include

o=obj
res=res
asm=masm

ENGINELIB=engine.lib
EDITORLIB=build.lib

LIBSQUISH=libsquish

flags_cl=
flags_rc=
!if "$(PLATFORM)" == "X64" || "$(PLATFORM)" == "x64"
flags_rc=/d_M_AMD64
USE_ASM=0
!elseif "$(PLATFORM)" == "ARM"
# Some day, perhaps.
USE_ASM=0
!else
flags_cl=/arch:IA32
!endif

!if $(RELEASE)
# release options
flags_cl=$(flags_cl) /O2
flags_link=/RELEASE
!else
# debugging options
flags_cl=$(flags_cl) /Ot /Z7 /DDEBUGGINGAIDS
flags_link=/DEBUG
!endif

CC=cl
AS=ml
RC=rc
LINK=link
OURCFLAGS=/nologo /MD /Zl $(flags_cl) /DKSFORBUILD /I$(INC) /I$(LIBSQUISH) /I$(SRC)
OURCXXFLAGS=/EHsc
GAMECFLAGS=/I$(GAME)
ASFLAGS=/nologo /coff
LINKFLAGS=/opt:ref /nologo $(flags_link)
RFLAGS=/nologo /i$(INC) /i$(GAME) $(flags_rc)
EXESUFFIX=.exe

ENGINEOBJS=$(SRC)\a-c.$o \
	$(SRC)\asmprot.$o \
	$(SRC)\baselayer.$o \
	$(SRC)\cache1d.$o \
	$(SRC)\compat.$o \
	$(SRC)\crc32.$o \
	$(SRC)\defs.$o \
	$(SRC)\engine.$o \
	$(SRC)\polymost.$o \
	$(SRC)\polymost_fs.$o \
	$(SRC)\polymost_vs.$o \
	$(SRC)\polymostaux_fs.$o \
	$(SRC)\polymostaux_vs.$o \
	$(SRC)\polymosttex.$o \
	$(SRC)\polymosttexcache.$o \
	$(SRC)\polymosttexcompress.$o \
	$(SRC)\hightile.$o \
	$(SRC)\mdsprite.$o \
	$(SRC)\glbuild.$o \
	$(SRC)\glbuild_fs.$o \
	$(SRC)\glbuild_vs.$o \
	$(SRC)\kplib.$o \
	$(SRC)\mmulti.$o \
	$(SRC)\osd.$o \
	$(SRC)\pragmas.$o \
	$(SRC)\scriptfile.$o \
	$(SRC)\textfont.$o \
	$(SRC)\smalltextfont.$o \
	$(SRC)\winlayer.$o

LIBSQUISHOBJS=$(LIBSQUISH)\alpha.$o $(LIBSQUISH)\clusterfit.$o \
	      $(LIBSQUISH)\colourblock.$o $(LIBSQUISH)\colourfit.$o \
	      $(LIBSQUISH)\colourset.$o $(LIBSQUISH)\maths.$o \
	      $(LIBSQUISH)\rangefit.$o $(LIBSQUISH)\singlecolourfit.$o \
	      $(LIBSQUISH)\squish.$o $(SRC)\rg_etc1.$o

EDITOROBJS=$(SRC)\build.$o \
	$(SRC)\startwin_editor.$o \
	$(SRC)\config.$o

GAMEEXEOBJS=$(GAME)\config.$o \
	$(GAME)\game.$o \
	$(GAME)\gameres.$(res) \
	$(GAME)\startwin_game.$o \
	$(GAME)\kdmsound.$o \
	$(GAME)\kdmsound_stub.$o \
	$(SRC)\$(ENGINELIB)

EDITOREXEOBJS=$(GAME)\bstub.$o \
	$(GAME)\buildres.$(res) \
	$(SRC)\$(EDITORLIB) \
	$(SRC)\$(ENGINELIB)

!if $(USE_ASM)
ENGINEOBJS=$(ENGINEOBJS) $(SRC)\a.$o
!endif

RENDERTYPE=WIN
BUILDCFLAGS=/DRENDERTYPEWIN=1
BUILDLIBS=user32.lib gdi32.lib shell32.lib ws2_32.lib comctl32.lib comdlg32.lib uxtheme.lib xinput9_1_0.lib

!if $(USE_POLYMOST)
BUILDCFLAGS=$(BUILDCFLAGS) /DUSE_POLYMOST=$(USE_POLYMOST)
!endif
!if $(USE_OPENGL)
BUILDCFLAGS=$(BUILDCFLAGS) /DUSE_OPENGL=$(USE_OPENGL)
!endif
!if $(USE_ASM)
BUILDCFLAGS=$(BUILDCFLAGS) /DUSE_ASM=$(USE_ASM)
!endif

LIBS=$(LIBS) $(BUILDLIBS)
CFLAGS=$(CFLAGS) $(BUILDCFLAGS)

# Source-control version stamping
!if [git --version >nul] == 0
ENGINEOBJS=$(ENGINEOBJS) $(SRC)\version-auto.$o
!else
ENGINEOBJS=$(ENGINEOBJS) $(SRC)\version.$o
!endif

# RULES
.SUFFIXES: .masm .cc .glsl

{$(SRC)}.masm{$(SRC)}.$o:
	$(AS) /c $(ASFLAGS) /Fo$@ $<

{$(SRC)}.c{$(SRC)}.$o:
	$(CC) /TC /c $(CFLAGS) $(OURCFLAGS) /Fo$@ $<

{$(SRC)}.cc{$(SRC)}.$o:
	$(CC) /TP /c $(CFLAGS) $(OURCFLAGS) $(OURCXXFLAGS) /Fo$@ $<

{$(SRC)}.cpp{$(SRC)}.$o:
	$(CC) /TP /c $(CFLAGS) $(OURCFLAGS) $(OURCXXFLAGS) /Fo$@ $<

{$(LIBSQUISH)}.cpp{$(LIBSQUISH)}.$o:
	$(CC) /TP /c $(CFLAGS) $(OURCFLAGS) $(OURCXXFLAGS) /Fo$@ $<

{$(TOOLS)}.c{$(TOOLS)}.$o:
	$(CC) /TC /c $(CFLAGS) $(OURCFLAGS) /Fo$@ $<

{$(TOOLS)}.cc{$(TOOLS)}.$o:
	$(CC) /TP /c $(CFLAGS) $(OURCFLAGS) $(OURCXXFLAGS) /Fo$@ $<

{$(GAME)}.c{$(GAME)}.$o:
	$(CC) /TC /c $(CFLAGS) $(OURCFLAGS) $(GAMECFLAGS) /Fo$@ $<

{$(GAME)}.cpp{$(GAME)}.$o:
	$(CC) /TP /c $(CFLAGS) $(OURCFLAGS) $(OURCXXFLAGS) $(GAMECFLAGS) /Fo$@ $<

{$(GAME)}.rc{$(GAME)}.$(res):
	$(RC) $(RFLAGS) /fo$@ /r $<

{$(SRC)}.glsl{$(SRC)}.c:
	if not exist bin2c$(EXESUFFIX) $(MAKE) /f Makefile.msvc /$(MAKEFLAGS) /nologo bin2c$(EXESUFFIX)
	bin2c$(EXESUFFIX) -text $< default_$(@B)_glsl > $@

# TARGETS
UTILS=kextract$(EXESUFFIX) kgroup$(EXESUFFIX) klist$(EXESUFFIX) transpal$(EXESUFFIX) wad2map$(EXESUFFIX) wad2map$(EXESUFFIX)

all: enginelib editorlib $(GAMEDATA)\game$(EXESUFFIX) $(GAMEDATA)\build$(EXESUFFIX) ;
utils: $(UTILS) ;

enginelib: $(SRC)\$(ENGINELIB) ;
$(SRC)\$(ENGINELIB): $(ENGINEOBJS) $(LIBSQUISHOBJS)
	lib /out:$@ /nologo $**

editorlib: $(SRC)\$(EDITORLIB) ;
$(SRC)\$(EDITORLIB): $(EDITOROBJS)
	lib /out:$@ /nologo $**


$(GAMEDATA)\game$(EXESUFFIX): $(GAMEEXEOBJS)
	$(LINK) /OUT:$@ /SUBSYSTEM:WINDOWS $(LINKFLAGS) /MAP $** $(LIBS) msvcrt.lib

$(GAMEDATA)\build$(EXESUFFIX): $(EDITOREXEOBJS)
	$(LINK) /OUT:$@ /SUBSYSTEM:WINDOWS $(LINKFLAGS) /MAP $** $(LIBS) msvcrt.lib

# the tools
kextract$(EXESUFFIX): $(TOOLS)\kextract.$o $(SRC)\compat.$o
	$(LINK) /OUT:$@ /SUBSYSTEM:CONSOLE $(LINKFLAGS) /MAP $** $(LIBS) msvcrt.lib

kgroup$(EXESUFFIX): $(TOOLS)\kgroup.$o $(SRC)\compat.$o
	$(LINK) /OUT:$@ /SUBSYSTEM:CONSOLE $(LINKFLAGS) /MAP $** $(LIBS) msvcrt.lib

klist$(EXESUFFIX): $(TOOLS)\klist.$o $(SRC)\compat.$o $(SRC)\crc32.$o
	$(LINK) /OUT:$@ /SUBSYSTEM:CONSOLE $(LINKFLAGS) /MAP $** $(LIBS) msvcrt.lib

transpal$(EXESUFFIX): $(TOOLS)\transpal.$o $(SRC)\pragmas.$o $(SRC)\compat.$o
	$(LINK) /OUT:$@ /SUBSYSTEM:CONSOLE $(LINKFLAGS) /MAP $** $(LIBS) msvcrt.lib

wad2map$(EXESUFFIX): $(TOOLS)\wad2map.$o $(SRC)\pragmas.$o $(SRC)\compat.$o
	$(LINK) /OUT:$@ /SUBSYSTEM:CONSOLE $(LINKFLAGS) /MAP $** $(LIBS) msvcrt.lib

wad2art$(EXESUFFIX): $(TOOLS)\wad2art.$o $(SRC)\pragmas.$o $(SRC)\compat.$o
	$(LINK) /OUT:$@ /SUBSYSTEM:CONSOLE $(LINKFLAGS) /MAP $** $(LIBS) msvcrt.lib

bin2c$(EXESUFFIX): $(TOOLS)\bin2c.$o
	$(LINK) /OUT:$@ /SUBSYSTEM:CONSOLE $(LINKFLAGS) /MAP $** msvcrt.lib

$(SRC)\version-auto.c: AlwaysBuild
	cmd /c $(TOOLS)\generateversion.cmd > $@

AlwaysBuild: ;

# DEPENDENCIES
!include Makefile.deps

# PHONIES
clean:
	-del /q $(ENGINEOBJS) $(LIBSQUISHOBJS) $(EDITOROBJS) $(GAMEEXEOBJS) $(EDITOREXEOBJS)
veryclean: clean
	-del /q $(SRC)\$(ENGINELIB) $(SRC)\$(EDITORLIB) $(GAMEDATA)\game$(EXESUFFIX) $(GAMEDATA)\build$(EXESUFFIX) $(UTILS)

